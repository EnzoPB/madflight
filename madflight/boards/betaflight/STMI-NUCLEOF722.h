/*==============================================================================
Generated on: 2023-12-29 02:35:19.611456
Generated by: betaflight_target_converter.py
Source: https://github.com/betaflight/unified-targets
Board name: NUCLEOF722
Manufacturer ID: STMI

//copy this line to madflight.ino to use this flight controller (or copy/paste the whole file)
#include "boards/betaflight/STMI-NUCLEOF722.h"
==============================================================================*/

#define HW_BOARD_NAME "BETAFLIGHT-STMI-NUCLEOF722"
#define HW_MCU "STM32F7X2"

//Defines from betaflight (not all will be used by madflight, and some boards define two or more IMU/MAG/BARO - madflight does not support this)
#define USE_IMU_MPU6050

//Sensor specific setup
#define IMU_ROTATE_CW270
#define BARO_I2C_ADR 0
#define MAG_I2C_ADR 0

//LED:
const int HW_PIN_LED      = PB7;
const int HW_LED_ON       = 1; //0:low is on, 1:high is on

//IMU SPI: (SPI1)
const int HW_PIN_SPI_MISO = PA6;
const int HW_PIN_SPI_MOSI = PA7;
const int HW_PIN_SPI_SCLK = PA5;
const int HW_PIN_IMU_CS   = -1;
const int HW_PIN_IMU_EXTI = PB15;

//BARO/MAG I2C: (I2C1)
const int HW_PIN_I2C_SDA  = PB8;
const int HW_PIN_I2C_SCL  = PB9;

//Outputs:
const int HW_OUT_COUNT    = 6;
const int HW_PIN_OUT[HW_OUT_COUNT] = {PB8,PA3,PB5,PB9,PE6,PB4};

//RC Receiver: (SERIAL1)
const int HW_PIN_RCIN_RX  = -1;
const int HW_PIN_RCIN_TX  = -1;
const int HW_PIN_RCIN_INVERTER = -1;

//GPS: (SERIAL3)
const int HW_PIN_GPS_RX   = PD9;
const int HW_PIN_GPS_TX   = PD8;
const int HW_PIN_GPS_INVERTER = -1;

//Battery ADC voltage and current inputs:
const int HW_PIN_BAT_V    = PA3;
const int HW_PIN_BAT_I    = PC0;

//Include Libraries
#include <Wire.h>                      //I2C communication
#include <SPI.h>                       //SPI communication
#include "src/hw_STM32/STM32_PWM.h"    //Servo and oneshot

//Bus Setup
HardwareSerial *rcin_Serial = new HardwareSerial(HW_PIN_RCIN_RX, HW_PIN_RCIN_TX);
HardwareSerial gps_Serial(HW_PIN_GPS_RX, HW_PIN_GPS_TX);
typedef TwoWire HW_WIRETYPE; //define the class to use for I2C
HW_WIRETYPE *i2c = &Wire; //&Wire or &Wire1
SPIClass *spi = &SPI;


/*
#==============================================================================
# BetaFlight Source file
#==============================================================================
# Betaflight / STM32F7X2 (S7X2) 4.2.0 Feb  2 2020 / 16:58:57 (norevision) MSP API: 1.43

#define USE_GYRO
#define USE_GYRO_MPU6050
#define USE_ACC
#define USE_ACC_MPU6050

board_name NUCLEOF722
manufacturer_id STMI

# resources
resource MOTOR 1 B08
resource MOTOR 2 A03
resource MOTOR 3 B05
resource MOTOR 4 B09
resource MOTOR 5 E06
resource MOTOR 6 B04
resource PPM 1 B15
resource PWM 1 B15
resource PWM 2 C06
resource PWM 3 C07
resource SERIAL_TX 2 D05
resource SERIAL_TX 3 D08
resource SERIAL_TX 4 A00
resource SERIAL_RX 2 D06
resource SERIAL_RX 3 D09
resource SERIAL_RX 4 A01
resource I2C_SCL 1 B08
resource I2C_SDA 1 B09
resource LED 1 B07
resource LED 2 B14
resource SPI_SCK 1 A05
resource SPI_SCK 4 E12
resource SPI_MISO 1 A06
resource SPI_MISO 4 E13
resource SPI_MOSI 1 A07
resource SPI_MOSI 4 E14
resource ADC_BATT 1 A03
resource ADC_RSSI 1 C03
resource ADC_CURR 1 C00
resource GYRO_EXTI 1 B15
resource USB_DETECT 1 A09

# timer
timer B15 AF9
# pin B15: TIM12 CH2 (AF9)
timer C06 AF3
# pin C06: TIM8 CH1 (AF3)
timer C07 AF3
# pin C07: TIM8 CH2 (AF3)
timer B08 AF2
# pin B08: TIM4 CH3 (AF2)
timer A03 AF1
# pin A03: TIM2 CH4 (AF1)
timer B05 AF2
# pin B05: TIM3 CH2 (AF2)
timer B09 AF2
# pin B09: TIM4 CH4 (AF2)
timer E06 AF3
# pin E06: TIM9 CH2 (AF3)
timer B04 AF2
# pin B04: TIM3 CH1 (AF2)

# dma
dma ADC 1 1
# ADC 1: DMA2 Stream 4 Channel 0
dma pin C06 0
# pin C06: DMA2 Stream 2 Channel 0
dma pin C07 1
# pin C07: DMA2 Stream 3 Channel 7
dma pin B08 0
# pin B08: DMA1 Stream 7 Channel 2
dma pin A03 1
# pin A03: DMA1 Stream 6 Channel 3
dma pin B05 0
# pin B05: DMA1 Stream 5 Channel 5
dma pin B04 0
# pin B04: DMA1 Stream 4 Channel 5

# master
set mag_bustype = I2C
set mag_i2c_device = 1
set baro_bustype = I2C
set baro_i2c_device = 1
set gyro_1_bustype = I2C
set gyro_1_i2cBus = 1
set gyro_1_sensor_align = CW270
set gyro_1_align_yaw = 2700

*/
