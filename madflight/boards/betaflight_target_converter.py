import re
import os
import datetime 

source_dirname = "betaflight_source"
destination_dirname = "betaflight"

ignore_defines = ["USE_GYRO", "USE_ACC.*", "USE_MAG", "USE_BARO", "USE_FLASH"]

def convert(filename) :
    #in and output files
    infile = source_dirname + "/" + filename
    strippedfilename = re.sub(r"(.config$)", r"", filename)
    outfile = destination_dirname + "/" + strippedfilename + ".h"

    #read lines from infile
    f = open(infile,"r")
    lines = f.readlines()
    f.close()

    #don't parse files that are too short
    if len(lines)<10 : return

    #parse lines to topics
    defines = []
    board_name = ""
    manufacturer_id = ""
    resources = {}
    sets = {}
    motors = []
    for line in lines:
        s = line.strip();
        s = re.sub(" +", " ", s) #replace multiple spaces with one space
        s = s + "   " #add dummy spaces to fill at least p[4]
        p = s.split(" ")

        if p[0] == "#define" :
            found = False;
            for ignore in ignore_defines :
                if re.fullmatch(ignore, p[1]) :
                    found = True
                    break
            if not found :
                defname = p[1].replace("_GYRO_","_IMU_")
                defvalue = p[2]
                defines.append( (defname + " " + defvalue).strip() )

        if p[0] == "board_name" :
            board_name = p[1]

        if p[0] == "manufacturer_id" :
            manufacturer_id = p[1]

        if p[0] == "resource" :
            pin = "P" + re.sub(r"0([0-9])", r"\1", p[3]) #convert pin name from C01 to PC1
            if p[1] == "MOTOR" :
                motors.append( pin )
            else :
                resources[ p[1] + ":" + p[2]] = pin

        if p[0] == "set" :
            sets[ p[1]] = p[3]

    #debug print topics
    # print( "defines:", defines )
    # print( "board_name:", board_name )
    # print( "manufacturer_id:", manufacturer_id )
    # print( "resources:", resources )
    # print( "sets:", sets )
    # print( "motors:", motors )

    #output madflight target header file
    f = open(outfile,"w")

    def fprint(txt) :
        f.write(txt + "\n")

    fprint( "/*==============================================================================" )
    fprint( "Generated on: " + str(datetime.datetime.now()) )
    fprint( "Generated by: betaflight_target_converter.py" )
    fprint( "Source: https://github.com/betaflight/unified-targets" )
    fprint( "Board name: " + board_name )
    fprint( "Manufacturer ID: " + manufacturer_id )
    fprint( "" )
    fprint( "//copy this line to madflight.ino to use this flight controller (or copy/paste the whole file)" )
    fprint( "#include \"boards/" + outfile + "\"" )
    fprint( "==============================================================================*/" )

    fprint( "" )
    fprint( "#define HW_BOARD_NAME \"BETAFLIGHT-" + strippedfilename + "\"" )
    mcu_re = re.search(r"\bSTM32\w+", lines[0] + " " + lines[1]);
    if mcu_re : fprint( "#define HW_MCU \"" + mcu_re.group() + "\"" )

    fprint( "" )
    fprint( "//Defines from betaflight (not all will be used by madflight, and some boards define two or more IMU/MAG/BARO - madflight does not support this)" )
    for define in defines:
        fprint( "#define " + define )

    fprint( "" )
    fprint( "//Sensor specific setup" )
    fprint( "#define IMU_ROTATE_" + sets.get("gyro_1_sensor_align","CW0") )
    fprint( "#define BARO_I2C_ADR " + sets.get("baro_i2c_address","0") )
    fprint( "#define MAG_I2C_ADR " + sets.get("mag_i2c_address","0") )

    fprint( "" )
    fprint( "//LED:" )
    fprint( "const int HW_PIN_LED      = " + resources.get("LED:1","-1") + ";" )
    fprint( "const int HW_LED_ON       = 1; //0:low is on, 1:high is on" )
 
    spi = sets.get("gyro_1_spibus","1")
    fprint( "" )
    fprint( "//IMU SPI: (SPI"+spi+")" )
    fprint( "const int HW_PIN_SPI_MISO = " + resources.get("SPI_MISO:" + spi,"-1") + ";" )
    fprint( "const int HW_PIN_SPI_MOSI = " + resources.get("SPI_MOSI:" + spi,"-1") + ";" )
    fprint( "const int HW_PIN_SPI_SCLK = " + resources.get("SPI_SCK:" + spi,"-1") + ";" )
    fprint( "const int HW_PIN_IMU_CS   = " + resources.get("GYRO_CS:1","-1") + ";" )
    fprint( "const int HW_PIN_IMU_EXTI = " + resources.get("GYRO_EXTI:1","-1") + ";" )

    i2c = sets.get("mag_i2c_device")
    i2c = sets.get("baro_i2c_device",i2c)
    if i2c is None: i2c = "1"
    fprint( "" )
    fprint( "//BARO/MAG I2C: (I2C"+i2c+")" )
    fprint( "const int HW_PIN_I2C_SDA  = " + resources.get("I2C_SCL:" + i2c,"-1") + ";" )
    fprint( "const int HW_PIN_I2C_SCL  = " + resources.get("I2C_SDA:" + i2c,"-1") + ";" )

    fprint( "" )
    fprint( "//Outputs:" )
    fprint( "const int HW_OUT_COUNT    = " + str(len(motors)) + ";" )
    fprint( "const int HW_PIN_OUT[HW_OUT_COUNT] = {" + ",".join(motors) + "};" )

    fprint( "" )
    fprint( "//RC Receiver: (SERIAL1)" )
    fprint( "const int HW_PIN_RCIN_RX  = " + resources.get("SERIAL_RX:1","-1") + ";" )
    fprint( "const int HW_PIN_RCIN_TX  = " + resources.get("SERIAL_TX:1","-1") + ";" )
    fprint( "const int HW_PIN_RCIN_INVERTER = " + resources.get("INVERTER:1","-1") + ";" )

    fprint( "" )
    fprint( "//GPS: (SERIAL3)" )
    fprint( "const int HW_PIN_GPS_RX   = " + resources.get("SERIAL_RX:3","-1") + ";" )
    fprint( "const int HW_PIN_GPS_TX   = " + resources.get("SERIAL_TX:3","-1") + ";" )
    fprint( "const int HW_PIN_GPS_INVERTER = " + resources.get("INVERTER:3","-1") + ";" )

    fprint( "" )
    fprint( "//Battery ADC voltage and current inputs:" )
    fprint( "const int HW_PIN_BAT_V    = " + resources.get("ADC_BATT:1","-1") + ";" )
    fprint( "const int HW_PIN_BAT_I    = " + resources.get("ADC_CURR:1","-1") + ";" )

    fprint( "" )
    fprint( "//Include Libraries" )
    fprint( "#include <Wire.h>                      //I2C communication" )
    fprint( "#include <SPI.h>                       //SPI communication" )
    fprint( "#include \"src/hw_STM32/STM32_PWM.h\"    //Servo and oneshot" )

    fprint( "" )
    fprint( "//Bus Setup" )
    fprint( "HardwareSerial *rcin_Serial = new HardwareSerial(HW_PIN_RCIN_RX, HW_PIN_RCIN_TX);" )
    fprint( "HardwareSerial gps_Serial(HW_PIN_GPS_RX, HW_PIN_GPS_TX);" )
    fprint( "typedef TwoWire HW_WIRETYPE; //define the class to use for I2C" )
    fprint( "HW_WIRETYPE *i2c = &Wire; //&Wire or &Wire1" )
    fprint( "SPIClass *spi = &SPI;" )

    fprint( "" )
    fprint( "" )
    fprint( "/*" )
    fprint( "#==============================================================================" )
    fprint( "# BetaFlight Source file" )
    fprint( "#==============================================================================" )
    fprint( "".join(lines) )
    fprint( "*/" )

    f.close()


for filename in os.listdir(source_dirname) :
    convert(filename)